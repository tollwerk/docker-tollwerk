
@define-mixin col $target, $container: var(--grid-columns), $gutter: var(--grid-gutter), $property: width {
	$(property): calc($target * (100% - $gutter) / $container);
}

@define-mixin col-outer $target, $container: var(--grid-columns), $gutter: var(--grid-gutter), $property: width {
	$(property): calc($target * (100% - $gutter) / $container + $gutter);
}

@define-mixin col-inner $target, $container: var(--grid-columns), $gutter: var(--grid-gutter), $property: width {
	$(property): calc($target * (100% - $gutter) / $container - $gutter);
}


/* Grid margins */
@define-mixin grid-internal-prefix $gutter, $columns, $prefix {
	& > * {
		margin: 0 calc($gutter / 2);
	}

	& > .xl, & > .xb,  & > .$(prefix)xl, & > .$(prefix)xb {
		margin-left: calc($gutter / -2);
	}

	& > .xr, & > .xb, & > .$(prefix)xr, & > .$(prefix)xb {
		margin-right: calc($gutter / -2);
	}

	& > .$(prefix)s0.$(prefix)s0 {
		margin-left: calc($gutter / 2);
	}

	@for $column from 1 to $columns {
		& > .c$(column), & > .$(prefix)c$(column).$(prefix)c$(column) {
			&, &.$(prefix)xn.$(prefix)xn {
				width: calc($column * (100% / $columns) - $gutter);
			}

			&.xl, &.xr, &.$(prefix)xl, &.$(prefix)xr {
				width: calc($column * (100% / $columns));
			}

			&.xb, &.$(prefix)xb {
				width: calc($column * (100% / $columns) + $gutter);
			}
		}

		/* Shifting */
		& > .s$(column), & > .$(prefix)s$(column).$(prefix)s$(column)  {
			&, &.$(prefix)xn.$(prefix)xn {
				margin-left: calc($column * (100% / $columns) + $gutter / 2);
			}

			&.xl, &.xb, &.$(prefix)xl, &.$(prefix)xb {
				margin-left: calc($column * (100% / $columns) - $gutter / 2);
			}
		}
	}
}

/* Grid margins */
@define-mixin grid-internal $gutter, $columns {
	& > * {
		margin: 0 calc($gutter / 2);
	}

	& > .xl, & > .xb {
		margin-left: calc($gutter / -2);
	}

	& > .xr, & > .xb {
		margin-right: calc($gutter / -2);
	}

	@for $column from 1 to $columns {
		& > .c$(column) {
			width: calc($column * (100% / $columns) - $gutter);

			&.xl, &.xr {
				width: calc($column * (100% / $columns));
			}

			&.xb {
				width: calc($column * (100% / $columns) + $gutter);
			}
		}

		/* Shifting */
		& > .s$(column)  {
			margin-left: calc($column * (100% / $columns) + $gutter / 2);

			&.xl, &.xb {
				margin-left: calc($column * (100% / $columns) - $gutter / 2);
			}
		}
	}
}

/* Grid */
@define-mixin grid $breakpoints, $gutters, $defaultGutter, $columns {
	.grid {
		@mixin-content;
		display: flex;

		& > * {
			width: 100%;
		}

		@add-mixin grid-internal $defaultGutter, $columns;

		/* Margins */
		@each $breakpoint, $gutter in $breakpoints, $gutters {
			@media (--bp-$(breakpoint)--min) {
				@add-mixin grid-internal-prefix $gutter, $columns, $(breakpoint)-;
			}
		}
	}
}
